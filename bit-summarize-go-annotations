#!/usr/bin/env python

## learned most goatools/python things from this great tutorial: GO Tutorial in Python - Solutions.ipynb, which comes from here: http://gohandbook.org/doku.php ; https://nbviewer.jupyter.org/urls/dessimozlab.github.io/go-handbook/GO%20Tutorial%20in%20Python%20-%20Solutions.ipynb

from goatools import obo_parser
import os
import argparse
import pandas as pd
import sys

parser = argparse.ArgumentParser(description='This script takes an GO-annotated tab-delimited file with gene IDs in the first column, and associated \
                                              GO terms in second column (can be multiple delimited by semi-colons). It returns 4 tab-delimited files of \
                                              counts and percentages: 3 broken down by GO namespace; 1 all together. For version info, run `bit-version`.')

required = parser.add_argument_group('required arguments')

required.add_argument("-i", "--input_GO_annotations", help="Input annotations file", action="store", dest="input_annotations", required=True)
parser.add_argument("-g", "--GO_obo_file", help='GO obo file to use (e.g. from: http://geneontology.org/docs/download-ontology/). By default will \
                                                 use "goslim_metagenomics.obo". "go-basic.obo" is also a pre-packaged option (enter `-g go_basic` to specify it). Or \
                                                 a different obo-formatted file can be specified here (it should probably be the one the annotations are based off of, or were slimmed based on).',
                    action="store", dest="obo", default="goslim_metagenomics")
parser.add_argument("-o", "--output_prefix", help='Prefix to give output tables. (default: "GO-summary").', action="store", dest="output_prefix", default="GO-summary")
parser.add_argument("--remove_zeroes", help="By default the program will still return reference GO terms even if there are 0 counts to them. Add this flag \
                                             to only return reference GO terms with counts.", action="store_true")

if len(sys.argv)==1:
  parser.print_help(sys.stderr)
  sys.exit(0)

args = parser.parse_args()

### checking and setting up obo file location
go_data_dir = os.environ["GO_DB_DIR"]

if args.obo == "goslim_metagenomics":
    go_obo = go_data_dir + "/goslim_metagenomics.obo"

elif args.obo == "go_basic":
    go_obo = go_data_dir + "/go-basic.obo"

else:
    go_obo = args.obo

### loading GO database
print("\n\tGO obo file being used:")
go = obo_parser.GODag(go_obo)
print("")

#### PARSING METAGENOMICS OBO TO BUILD TABLE
# getting unique GO Term IDs in the metagenomics.obo
unique_GO_terms_set = set()
for go_term in go.values():
    unique_GO_terms_set.add(go_term.id)


# function to get info for a go term:
def get_general_info(go_id):
    go_term = go[go_id]
    name = go_term.name
    namespace = go_term.namespace
    depth = go_term.depth
    
    # returns a list
    go_term_info = [go_id, namespace, depth, name]
    
    return go_term_info


# creating table of GO info for each term
table_list = [[]]
for GO_ID in unique_GO_terms_set:
    table_list.append(get_general_info(GO_ID))

table_list.pop(0) # because i don't know how to initialize the list without it introducing a row of NAs...

header = ["ID", "namespace", "depth", "name"]
GO_df = pd.DataFrame(table_list, columns=header).sort_values(by=["depth"])

#### COUNTING HOW MANY TIMES EACH TERM APPEARS IN ANNOTATION FILE
# creating dictionary to hold counts
term_list = GO_df["ID"]
term_counts_dict={key:0 for key in term_list}

# iterating through input file
with open(args.input_annotations, "r") as annots:
    for line in annots:

        if len(line.strip().split("\t")) <= 1:
            continue
        else:
            terms=line.strip().split("\t")[1].replace(" ", "")
            for term in terms.split(";"):
                term_counts_dict[term] += 1

GO_df['counts'] = term_counts_dict.values()

#### SPLITTING TO CREATE 4 OUTPUT TABLES
biological_process_NS_df = GO_df[GO_df["namespace"] == "biological_process"]
molecular_function_NS_df = GO_df[GO_df["namespace"] == "molecular_function"]
cellular_component_NS_df = GO_df[GO_df["namespace"] == "cellular_component"]

#### ADDING COLUMN WITH PERCENTAGE OF TOTAL TERMS FOR EACH TABLE
GO_perc_df = pd.DataFrame({"percent_of_annotated": round(GO_df["counts"] / GO_df["counts"].sum() * 100, 2)})
GO_df = pd.concat([GO_df, GO_perc_df], axis=1)

BP_percs_df = pd.DataFrame({"percent_of_annotated": round(biological_process_NS_df["counts"] / biological_process_NS_df["counts"].sum() * 100, 2)})
biological_process_NS_df = pd.concat([biological_process_NS_df, BP_percs_df], axis=1)

MF_percs_df = pd.DataFrame({"percent_of_annotated": round(molecular_function_NS_df["counts"] / molecular_function_NS_df["counts"].sum() * 100, 2)})
molecular_function_NS_df = pd.concat([molecular_function_NS_df, MF_percs_df], axis=1)

CC_percs_df = pd.DataFrame({"percent_of_annotated": round(cellular_component_NS_df["counts"] / cellular_component_NS_df["counts"].sum() * 100, 2)})
cellular_component_NS_df = pd.concat([cellular_component_NS_df, CC_percs_df], axis=1)

#### WRITING OUT SUMMARY TABLES
if not args.remove_zeroes:

    no_term_check_all = GO_df[GO_df["counts"] > 0]
    if len(no_term_check_all.index) == 0:
        print("\n\tThere were no counts to any terms :( Sure we're working with the right files here?\n")
        sys.exit(0)
    else:
        with open(args.output_prefix + "-all.tsv", "w") as out:
            out.write(GO_df.to_csv(index=False, sep="\t"))

    no_term_check_BP = biological_process_NS_df[biological_process_NS_df["counts"] > 0]
    if len(no_term_check_BP.index) == 0:
        print("\n\tThere were no counts to any Biological Process terms, so that table wasn't reported.\n")
    else:
        with open(args.output_prefix + "-biological-processes.tsv", "w") as out:
            out.write(biological_process_NS_df.to_csv(index=False, sep="\t"))

    no_term_check_MF = molecular_function_NS_df[molecular_function_NS_df["counts"] > 0]
    if len(no_term_check_MF.index) == 0:
        print("\n\tThere were no counts to any Molecular Function terms, so that table wasn't reported.\n")
    else:
        with open(args.output_prefix + "-molecular-functions.tsv", "w") as out:
            out.write(molecular_function_NS_df.to_csv(index=False, sep="\t"))

    no_term_check_CC = cellular_component_NS_df[cellular_component_NS_df["counts"] > 0]
    if len(no_term_check_CC.index) == 0:
        print("\n\tThere were no counts to any Cellular Component terms, so that table wasn't reported.\n")
    else:    
        with open(args.output_prefix + "-cellular-components.tsv", "w") as out:
            out.write(cellular_component_NS_df.to_csv(index=False, sep="\t"))
        
else:
    GO_df = GO_df[GO_df["counts"] > 0]
    if len(GO_df.index) == 0:
        print("\n\tThere were no counts to any terms :( Sure we're working with the right files here?\n")
        sys.exit(0)
    else:
        with open(args.output_prefix + "-all.tsv", "w") as out:
            out.write(GO_df.to_csv(index=False, sep="\t"))

    biological_process_NS_df = biological_process_NS_df[biological_process_NS_df["counts"] > 0]
    if len(biological_process_NS_df.index) == 0:
        print("\n\tThere were no counts to any Biological Process terms, so that table wasn't reported.\n")
    else:
        with open(args.output_prefix + "-biological-processes.tsv", "w") as out:
            out.write(biological_process_NS_df.to_csv(index=False, sep="\t"))

    molecular_function_NS_df = molecular_function_NS_df[molecular_function_NS_df["counts"] > 0]
    if len(molecular_function_NS_df.index) == 0:
        print("\n\tThere were no counts to any Molecular Function terms, so that table wasn't reported.\n")
    else:
        with open(args.output_prefix + "-molecular-functions.tsv", "w") as out:
            out.write(molecular_function_NS_df.to_csv(index=False, sep="\t"))

    cellular_component_NS_df = cellular_component_NS_df[cellular_component_NS_df["counts"] > 0]
    if len(cellular_component_NS_df.index) == 0:
        print("\n\tThere were no counts to any Cellular Component terms, so that table wasn't reported.\n")
    else:
        with open(args.output_prefix + "-cellular-components.tsv", "w") as out:
            out.write(cellular_component_NS_df.to_csv(index=False, sep="\t"))
